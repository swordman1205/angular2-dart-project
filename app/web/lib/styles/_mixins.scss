@mixin crossBrowser($property, $style)
{
  -webkit-#{$property}: #{$style};
  -moz-#{$property}: #{$style};
  -ms-#{$property}: #{$style};
  -o-#{$property}: #{$style};
  #{$property}: #{$style};
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content
  }
  @-moz-keyframes #{$name} {
    @content
  }
  @-ms-keyframes #{$name} {
    @content
  }
  @-o-keyframes #{$name} {
    @content
  }
  @keyframes #{$name} {
    @content
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }

  &::-moz-placeholder {  /* Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin alpha-background-color($color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  background-color: $solid-color;
  background-color: $color;
}


@mixin alpha-box-shadow($color, $box-shadow) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $box-shadow, $percent);
  box-shadow: inset 0 0 1px 1px $solid-color;
  box-shadow: inset 0 0 1px 1px $color;
}

@mixin background-image-retina($file, $type) {
  background-image: url($file + '.' + $type);

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    &  {
      background-image: url($file + '@2x.' + $type);
    }
  }

  @media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 288dpi) {
    & {
      background-image: url($file + '@3x.' + $type);
    }
  }
}

/* CSS3 calc() function to perform calculations */
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

/// Responsive mode

/// Get a breakpoint's width
///
/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints
/// @returns {Number} Value in pixels
@function mq-get-breakpoint-width($name) {
  @if map-has-key($mq-breakpoints, $name) {
    @return map-get($mq-breakpoints, $name);
  } @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
  }
}

/// Media Query mixin
///
/// @param {String | Boolean} $from (false) - One of $mq-breakpoints
/// @param {String | Boolean} $until (false) - One of $mq-breakpoints
/// @param {String | Boolean} $and (false) - Additional media query parameters
/// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦
/// @requires {function} mq-get-breakpoint-width
@mixin mq(
  $from: false,
  $until: false,
  $and: false,
  $media-type: 'screen'
) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: $from * 1px;
    } @else {
      $min-width: mq-get-breakpoint-width($from);
    }
  }

  // Until: that breakpoint (exclusive)
  @if $until {
    @if type-of($until) == number {
      $max-width: $until * 1px;
    } @else {
      $max-width: mq-get-breakpoint-width($until) - 1px;
    }
  }

  @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
  @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
  @if $and            { $media-query: '#{$media-query} and #{$and}'; }

  // Remove unnecessary media query prefix 'screen and '
  @if ($media-type == 'screen' and $media-query != '') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}

@mixin rotate{
  0% {
    @include crossBrowser('transform', 'rotate(0deg)');
  }
  100% {
    @include crossBrowser('transform', 'rotate(360deg)');
  }
}
